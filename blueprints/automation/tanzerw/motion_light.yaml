blueprint:
  name: Lichtsteuerung mit Bewegungssensor
  description: ''
  domain: automation
  input:
    motion_sensor:
      name: Bewegungssensor
      description: Dieser Sensor wird genutzt um das Licht einzuschalten.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    target_entity:
      name: Licht
      description: Licht, welches eingeschalten wird.
      selector:
        entity:
          domain: light
    no_motion_wait:
      name: Wartezeit (Sekunden)
      description: Wartezeit, nachdem die letzte Bewegung erkannt wurde
      default: 60
      selector:
        number:
          min: 0.0
          max: 300.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    time_limit_after:
      name: Zeit von
      description: Die Automatisierung wird nur ausgeführt, wenn die aktuelle Zeit 
        nach diesem Wert liegt. 
      default: '00:00:01'
      selector:
        time: {}
    time_limit_before:
      name: Zeit bis
      description: Die Automatisierung wird nur ausgeführt, wenn die aktuelle Zeit 
        vor diesem Wert liegt.  
      default: '23:59:59'
      selector:
        time: {}
    illuminance_sensor:
      name: (OPTIONAL) Illuminance sensor
      description: Dieser Sensor wird verwendet, um die Illumination zu bestimmen. 
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: (OPTIONAL) Illuminance cutoff value
      description: Dieser Wert wird verwendet um die aktuelle Illumination zu vergleichen
      default:
      selector:
        number:
          min: 0.0
          max: 100000.0
          unit_of_measurement: lx
          mode: slider
          step: 1.0
    blocker_entity:
      name: (OPTIONAL) Block Entität
      description: Wenn der Status dieser Entität aktiviert ist, wird verhindert, dass die Automatisierung
         ausgeführt wird. Z.B. Schlafmodus oder Abwesenheitsmodus. 
      default:
      selector:
        entity: {}


mode: restart
max_exceeded: silent

variables:
  target_entity: !input 'target_entity'
  illuminance_currently: !input 'illuminance_sensor'
  illuminance_cutoff: !input 'illuminance_cutoff'
  blocker_entity: !input 'blocker_entity'
  time_limit_before: !input 'time_limit_before'
  time_limit_after: !input 'time_limit_after'
  no_motion_wait: !input 'no_motion_wait'

trigger:
  platform: state
  entity_id: !input 'motion_sensor'
  to: 'on'

condition:
  - condition: template
    value_template: '{{ (states(target_entity) == ''on'') or (illuminance_currently
      == none) or (illuminance_cutoff == none) or (states[illuminance_currently].state
      | int < illuminance_cutoff | int) }}'
  - condition: template
    value_template: '{{ (blocker_entity == none) or (states[blocker_entity].state ==
      ''off'') }}'
  - condition: time
    after: !input time_limit_after
    before: !input time_limit_before

action:
  - service: homeassistant.turn_on
    entity_id: !input 'target_entity'
  - condition: template
    value_template: '{{ no_motion_wait != none }}'
  - wait_for_trigger:
      platform: state
      entity_id: !input 'motion_sensor'
      from: 'on'
      to: 'off'
  - delay:
      seconds: '{{ no_motion_wait | int }}'
  - service: homeassistant.turn_off
    entity_id: !input 'target_entity'
