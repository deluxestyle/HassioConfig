title: card-mod
cards:
  # Style the card, but use special styles for the header
  - type: entities
    title: Simple configuration
    style: |
      ha-card {
        color: blue;
      }
      .card-header {
        color: red;
      }
    entities:
      - light.bed_light
      - light.ceiling_lights
      - light.kitchen_lights

  # Style an entities card row separately
  - type: entities
    title: Styled rows
    entities:
      - light.bed_light
      - entity: light.ceiling_lights
        style: |
          :host {
            color: green;
          }
      - type: section
        label: A section label
        style: |
          :host {
            --primary-color: red;
          }
      - entity: light.kitchen_lights


  # Styles that update to state changes using jinja2 templating
  - type: entities
    title: Dynamic styles
    style: |
      ha-card {
        background: url(http://place{{ states("input_select.background") }}.com/g/600/400);
        --primary-text-color: rgb(250,250,250);
        --paper-listbox-background-color: black;
        text-shadow: 1px 1px 0 #000;
      }
    entities:
      - input_select.background
      - light.bed_light
      - light.ceiling_lights
      - light.kitchen_lights

  # Using the "config" special variable for templates
  - type: entity-button
    entity: light.bed_light
    style: |
      ha-card {
        background:
          {% if is_state(config.entity, 'on') %}
            green
          {% endif %}
          ;

  # Advanced css selectors can be used
  - type: entities
    title: Advanced CSS rules
    style: |
      ha-card {
        background: rgba(0,50,0,0.5);
        border-radius: 15px;
      }
      #states div:nth-of-type(2n+0) {
        color: red;
      }
    entities:
      - light.bed_light
      - light.ceiling_lights
      - light.kitchen_lights
      - light.bed_light

  # Cards can be made transparent by removing background and box-shadow
  - type: entities
    title: Transparent card
    show_header_toggle: false
    style: |
      ha-card {
        background: none;
        box-shadow: none;
      }
    entities:
      - type: custom:text-divider-row
        text: blah

  # Entities in glance cards can also be styled individually
  - type: glance
    title: Glance card
    style: |
      ha-card {
        font-variant: small-caps;
      }
      .card-header {
        font-size: 16px;
      }
    entities:
      - light.bed_light
      - entity: light.ceiling_lights
        style: |
          :host {
            font-variant: none;
          }
      - light.kitchen_lights

  # Adjustable picture elements position
  # This could be much more useful with, say, an x and y value taken from sensor values
  # that e.g. contain your robot vacuum cleaner location...
  - type: vertical-stack
    cards:
      - type: picture-elements
        style: |
          ha-card {
            --top: {{ states("input_number.y_pos") }}%;
            --left: {{ states("input_number.x_pos") }}%;
          }
        title: Dynamic styling of elements
        image: "http://placekitten.com/g/800/600"
        elements:
          - type: custom:hui-state-badge-element
            entity: light.bed_light
            style:
              top: "var(--top)"
              left: "var(--left)"
      - type: entities
        entities:
          - input_number.x_pos
          - input_number.y_pos

  # Some animations
  - type: horizontal-stack
    cards:
      - type: entity-button
        entity: light.bed_light
        name: blink
        style: |
          ha-card {
            animation: blink 3s linear infinite;
          }
          @keyframes blink {
            50% {
              background: red;
            }
          }
      - type: entity-button
        name: outline
        entity: light.bed_light
        style: |
          ha-card {
            outline: 0px none green;
            animation: blink 3s linear infinite;
          }
          @keyframes blink {
            24% {
              outline: 0px none white;
              }
            25% {
              outline: 0px solid green;
              }
            50% {
              outline: 5px solid green;
            }
            75% {
              outline: 0px solid green;
              }
            76% {
              outline: 0px none white;
              }
          }
      - type: entity-button
        name: wiggle
        entity: light.bed_light
        style: |
          ha-card {
            animation: wiggle 2s linear infinite alternate;
          }
          @keyframes wiggle {
            0% {
              -webkit-transform: rotate(5deg);
              transform: rotate(5deg);
            }
            100% {
              -webkit-transform: rotate(-5deg);
              transform: rotate(-5deg);
            }
          }

  # Keyframes are inherited into picture-elements elements as well...
  - type: picture-elements
    style: |
      @keyframes dvd {
        0% {
          left: 0%;
          top: 50%;
          --paper-item-icon-color: red;
        }
        30% {
          left: 75%;
          top: 0%;
          --paper-item-icon-color: green;
        }
        50% {
          left: 95%;
          top: 25%;
          --paper-item-icon-color: blue;
        }
        80% {
          left: 25%;
          top: 95%;
          --paper-item-icon-color: yellow;
        }
      }
    image: "http://placekitten.com/g/800/600"
    elements:
      - type: state-icon
        entity: light.bed_light
        tap_action:
          action: toggle
        style:
          animation: dvd 10s linear infinite
          left: 0%
          top: 50%

  # An example of going into shadowroots of stuff
  # Not for the faint of heart
  - type: alarm-panel
    card_icon: mdi:bell
    name: Alarm Panel
    style:
      .: |
        ha-card {
          --mdc-theme-primary: red;
        }
      "#keypad mwc-button":
        $: |
          :host {
            background: blue;
          }
          button {
            font-size: 24px !important;
          }
      "#keypad mwc-button:nth-of-type(12)":
        $: |
          button {
            font-size: 16px !important;
            --mdc-theme-primary: green;
          }
    entity: alarm_control_panel.alarm

  # By placing a stack in an entities card as a row, it can be modded as well.
  - type: entities
    style: |
      ha-card {
        --ha-card-background: red;
        box-shadow: none;
        background: none;
      }
      .card-content {
        padding: 0
      }
    entities:
      - type: custom:hui-horizontal-stack-card
        cards:
          - type: entities
            entities:
              - light.bed_light
              - light.kitchen_lights
              - light.ceiling_lights
          - type: glance
            entities:
              - light.bed_light
              - light.kitchen_lights
              - light.ceiling_lights

  # Automatically styled entity rows
  # Makes use of config variable
  - type: custom:auto-entities
    filter:
      include:
        - domain: light
          options:
            style: |
              :host {
                color: {% if is_state(config.entity, 'on') %} green {% endif %};
              }
    card:
      type: entities
      title: Auto-entities

